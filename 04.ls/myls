#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'etc'

PERMISSION = {
  0 => '---',
  1 => '--x',
  2 => '-w-',
  3 => '-wx',
  4 => 'r--',
  5 => 'r-x',
  6 => 'rw-',
  7 => 'rwx'
}.freeze

def main
  options = fetch_options
  if options[:l]
    output_files_in_long_format(list_files(options))
  else
    output_files_default(list_files(options))
  end
end

def fetch_options
  opt = OptionParser.new
  options = {}
  opt.on('-a') { options[:a] = true }
  opt.on('-r') { options[:r] = true }
  opt.on('-l') { options[:l] = true }
  opt.parse!(ARGV)
  options
end

def list_files(options)
  flags = options[:a] ? File::FNM_DOTMATCH : 0
  options[:r] ? Dir.glob('*', flags).reverse : Dir.glob('*', flags)
end

def get_file_info(file)
  stat = File.stat(file)
  {
    name: file,
    type: stat.ftype,
    size: stat.size,
    mode: format('%o', stat.mode & 0o777),
    nlink: stat.nlink,
    owner: Etc.getpwuid(stat.uid).name,
    group: Etc.getgrgid(stat.gid).name,
    mtime: stat.mtime
  }
end

def fetch_permission(file_mode)
  file_mode.chars.map { |char| PERMISSION[char.to_i] }.join
end

def format_file_info(info, max_nlink_length, max_owner_length, max_group_length)
  type = info[:type] == 'file' ? '-' : info[:type][0]
  permissions = fetch_permission(info[:mode])
  nlink = info[:nlink].to_s.rjust(max_nlink_length)
  owner = info[:owner].ljust(max_owner_length)
  group = info[:group].ljust(max_group_length)
  size = info[:size].to_s.rjust(4)
  mtime = info[:mtime]
  name = info[:name]

  month = mtime.strftime('%m').to_i.to_s.rjust(2)
  day = mtime.strftime('%d').to_i.to_s.rjust(2)
  time = mtime.strftime('%H:%M')
  formatted_mtime = "#{month}月 #{day} #{time}"

  "#{type}#{permissions} #{nlink} #{owner} #{group} #{size} #{formatted_mtime} #{name}"
end

def fetch_blocks(files)
  blocks = files.map { |file| File.stat(file).blocks }
  blocks.sum / 2
end

def output_files_in_long_format(files)
  puts "合計 #{fetch_blocks(files)}"

  file_infos = files.map { |file| get_file_info(file) }

  max_nlink_length = file_infos.map { |info| info[:nlink].to_s.length }.max
  max_owner_length = file_infos.map { |info| info[:owner].length }.max
  max_group_length = file_infos.map { |info| info[:group].length }.max

  file_infos.each do |info|
    puts format_file_info(info, max_nlink_length, max_owner_length, max_group_length)
  end
end

def output_files_default(file_names, cols = 3)
  # 要件を満たすための行数を求め、行列形式の配列をつくる（row:行,col:列）
  rows = (file_names.size % cols).zero? ? file_names.size / cols : file_names.size / cols + 1
  matrix_file_names = Array.new(rows) { Array.new(cols) }

  # 作成した配列にファイル名を割り当てていく
  file_names.each_with_index do |file, index|
    matrix_file_names[index.divmod(rows)[1]][index.divmod(rows)[0]] = file
  end

  # 各列の最大長を計算
  col_max_lengths = Array.new(cols) do |col|
    matrix_file_names.map { |row| row[col].to_s.length }.max
  end

  matrix_file_names.each do |row|
    row.each_with_index do |file, col|
      print file.to_s.ljust(col_max_lengths[col] + 2)
    end
    puts
  end
end

main
